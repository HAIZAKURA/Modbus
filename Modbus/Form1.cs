using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Modbus
{
    cHVibGljIHBhcnRpYWwgY2xhc3MgRm9ybTEgOiBGb3JtCiAgICB7CiAgICAgICAgI3JlZ2lvbiBNQl9GVU5DVElPTl9DT0RFCiAgICAgICAgQnl0ZSBNQl9SRUFEX0RJU0NSRVRFICA9IDB4MDI7ICAgICAgICAgIC8v6K+756a75pWj6L6T5YWl5a+E5a2Y5ZmoCiAgICAgICAgQnl0ZSBNQl9SRUFEX0hPTERfUkVHICA9IDB4MDM7ICAgICAgICAgIC8v6K+75L+d5oyB5a+E5a2Y5ZmoCiAgICAgICAgQnl0ZSBNQl9SRUFEX0lOUFVUX1JFRyA9IDB4MDQ7ICAgICAgICAgIC8v6K+76L6T5YWl5a+E5a2Y5ZmoCiAgICAgICAgI2VuZHJlZ2lvbgoKICAgICAgICAjcmVnaW9uIE1CX0ZVTkNUSU9OX0NPREVfQUREQlRFCiAgICAgICAgQnl0ZVtdIE1CX1JFQURfRElTQ1JFVEVfQUREQlRFICA9IHsgMHgwMCwgMHgwMCwgMHgwMCwgMHgxNSB9OyAgICAgICAgICAvL+ivu+emu+aVo+i+k+WFpeWvhOWtmOWZqOi1t+Wni+e7k+adn+WcsOWdgAogICAgICAgIEJ5dGVbXSBNQl9SRUFEX0hPTERfUkVHX0FEREJURSAgPSB7IDB4MDAsIDB4MDAsIDB4MDAsIDB4MUEgfTsgICAgICAgICAgLy/or7vkv53mjIHlr4TlrZjlmajotbflp4vnu5PmnZ/lnLDlnYAKICAgICAgICBCeXRlW10gTUJfUkVBRF9JTlBVVF9SRUdfQUREQlRFID0geyAweDAwLCAweDAwLCAweDAwLCAweDA2IH07ICAgICAgICAgIC8v6K+76L6T5YWl5a+E5a2Y5Zmo6LW35aeL57uT5p2f5Zyw5Z2ACiAgICAgICAgI2VuZHJlZ2lvbgoKICAgICAgICBTZXJpYWxQb3J0IHNwID0gbnVsbDsgICAgICAgICAgIC8v5aOw5piO5Liy5Y+j57G7CiAgICAgICAgYm9vbCBpc09wZW4gPSBmYWxzZTsgICAgICAgICAgICAvL+aJk+W8gOS4suWPo+agh+W/lwogICAgICAgIGJvb2wgaXNMaXZlID0gZmFsc2U7ICAgICAgICAgICAgLy/lrp7ml7bmlbDmja7moIflv5cKICAgICAgICBib29sIGlzU2V0UHJvcGVydHkgPSBmYWxzZTsgICAgIC8v5bGe5oCn6K6+572u5qCH5b+XCiAgICAgICAgQnl0ZSBkZXZBZGRyOyAgICAgICAgICAgICAgICAgICAvL+iuvuWkh+WcsOWdgOexuwogICAgICAgIEJ5dGUgZnVuQ29kZTsgICAgICAgICAgICAgICAgICAgLy/lip/og73noIHnsbsKICAgICAgICBCeXRlW10gYWRkckJ0RSA9IG5ldyBCeXRlWzRdOyAgIC8v6LW35aeL57uT5p2f5Zyw5Z2A57G7CiAgICAgICAgQnl0ZVtdIGNyY0NvZGUgPSBuZXcgQnl0ZVsyXTsgICAvL0NSQ+agoemqjOeggeexuwogICAgICAgIEJ5dGUgdWNDUkNIaSA9IDB4RkY7CiAgICAgICAgQnl0ZSB1Y0NSQ0xvID0gMHhGRjsKCiAgICAgICAgcHVibGljIEZvcm0xKCkKICAgICAgICB7CiAgICAgICAgICAgIEluaXRpYWxpemVDb21wb25lbnQoKTsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBGb3JtMV9Mb2FkKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQogICAgICAgIHsKICAgICAgICAgICAgdGhpcy5NYXhpbXVtU2l6ZSA9IHRoaXMuU2l6ZTsKICAgICAgICAgICAgdGhpcy5NaW5pbXVtU2l6ZSA9IHRoaXMuU2l6ZTsKICAgICAgICAgICAgdGhpcy5NYXhpbWl6ZUJveCA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDEwOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNieENPTVBvcnQuSXRlbXMuQWRkKCJDT00iICsgKGkgKyAxKS5Ub1N0cmluZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIEJ0bkNoZWNrQ09NX0NsaWNrKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQogICAgICAgIHsKICAgICAgICAgICAgYm9vbCBjb21FeGlzdGVuY2UgPSBmYWxzZTsgIC8v5piv5ZCm5pyJ5Y+v55So55qE5Liy5Y+jCiAgICAgICAgICAgIGNieENPTVBvcnQuSXRlbXMuQ2xlYXIoKTsgICAvL+a4hemZpOW9k+WJjeS4suWPo+WPt+S4reeahOaJgOacieS4suWPo+WQjeensAogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDEwOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRyeQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFNlcmlhbFBvcnQgc3AgPSBuZXcgU2VyaWFsUG9ydCgiQ09NIiArIChpICsgMSkuVG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgICAgICAgc3AuT3BlbigpOwogICAgICAgICAgICAgICAgICAgIHNwLkNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgY2J4Q09NUG9ydC5JdGVtcy5BZGQoIkNPTSIgKyAoaSArIDEpLlRvU3RyaW5nKCkpOwogICAgICAgICAgICAgICAgICAgIGNvbUV4aXN0ZW5jZSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb21FeGlzdGVuY2UpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNieENPTVBvcnQuU2VsZWN0ZWRJbmRleCA9IDA7Ly/kvb9MaXN0Qm945pi+56S656ys5LiA5Liq5re75Yqg55qE57Si5byVCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBNZXNzYWdlQm94LlNob3coIuayoeacieaJvuWIsOWPr+eUqOS4suWPo++8gSIsICLplJnor6/mj5DnpLoiKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIEJ0bkNsZWFuRGF0YV9DbGljayhvYmplY3Qgc2VuZGVyLCBFdmVudEFyZ3MgZSkKICAgICAgICB7CiAgICAgICAgICAgIHRieFJlY3ZEYXRhLlRleHQgPSAiIjsKICAgICAgICAgICAgdGJ4U2VuZERhdGEuVGV4dCA9ICIiOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSBib29sIENoZWNrUG9ydFNldHRpbmcoKSAgICAgLy/kuLLlj6PmmK/lkKborr7nva4KICAgICAgICB7CiAgICAgICAgICAgIGlmIChjYnhDT01Qb3J0LlRleHQuVHJpbSgpID09ICIiKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmIChjYnhCYXVkUmF0ZS5UZXh0LlRyaW0oKSA9PSAiIikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBpZiAoY2J4RGF0YUJpdHMuVGV4dC5UcmltKCkgPT0gIiIpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgaWYgKGNieFBhcml0di5UZXh0LlRyaW0oKSA9PSAiIikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBpZiAoY2J4U3RvcEJpdHMuVGV4dC5UcmltKCkgPT0gIiIpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgU2V0UG9ydFByb1BlcnR5KCkgICAgICAvL+iuvue9ruS4suWPo+WxnuaApwogICAgICAgIHsKICAgICAgICAgICAgc3AgPSBuZXcgU2VyaWFsUG9ydCgpOwoKICAgICAgICAgICAgc3AuUG9ydE5hbWUgPSBjYnhDT01Qb3J0LlRleHQuVHJpbSgpOyAgICAgICAvL+S4suWPo+WQjQoKICAgICAgICAgICAgc3AuQmF1ZFJhdGUgPSBDb252ZXJ0LlRvSW50MzIoY2J4QmF1ZFJhdGUuVGV4dC5UcmltKCkpOy8v5rOi54m5546HCgogICAgICAgICAgICBmbG9hdCBmID0gQ29udmVydC5Ub1NpbmdsZShjYnhTdG9wQml0cy5UZXh0LlRyaW0oKSk7Ly/lgZzmraLkvY0KICAgICAgICAgICAgaWYgKGYgPT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3AuU3RvcEJpdHMgPSBTdG9wQml0cy5Ob25lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGYgPT0gMSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3AuU3RvcEJpdHMgPSBTdG9wQml0cy5PbmU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoZiA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzcC5TdG9wQml0cyA9IFN0b3BCaXRzLlR3bzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHNwLlN0b3BCaXRzID0gU3RvcEJpdHMuT25lOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzcC5EYXRhQml0cyA9IENvbnZlcnQuVG9JbnQxNihjYnhEYXRhQml0cy5UZXh0LlRyaW0oKSk7Ly/mlbDmja7kvY0KCiAgICAgICAgICAgIHN0cmluZyBzID0gY2J4UGFyaXR2LlRleHQuVHJpbSgpOyAgICAgICAvL+agoemqjOS9jQogICAgICAgICAgICBpZiAocy5Db21wYXJlVG8oIuaXoCIpID09IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHNwLlBhcml0eSA9IFBhcml0eS5Ob25lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHMuQ29tcGFyZVRvKCLlpYfmoKHpqowiKSA9PSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzcC5QYXJpdHkgPSBQYXJpdHkuT2RkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHMuQ29tcGFyZVRvKCLlgbbmoKHpqowiKSA9PSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzcC5QYXJpdHkgPSBQYXJpdHkuRXZlbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHNwLlBhcml0eSA9IFBhcml0eS5Ob25lOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzcC5SZWFkVGltZW91dCA9IC0xOyAgICAgICAgIC8v6K6+572u6LaF5pe26K+75Y+W5pe26Ze0CiAgICAgICAgICAgIHNwLlJ0c0VuYWJsZSA9IHRydWU7CgogICAgICAgICAgICAvKgogICAgICAgICAgICAvL+WumuS5iURhdGFSZWNlaXZlZOS6i+S7tu+8jOW9k+S4suWPo+aUtuWIsOaVsOaNruWQjuinpuWPkeS6i+S7tgogICAgICAgICAgICBzcC5EYXRhUmVjZWl2ZWQgKz0gbmV3IFNlcmlhbERhdGFSZWNlaXZlZEV2ZW50SGFuZGxlcihzcF9EYXRhUmVjZWl2ZWQpOwoKICAgICAgICAgICAgdm9pZCBzcF9EYXRhUmVjZWl2ZWQob2JqZWN0IHNlbmRlciwgU2VyaWFsRGF0YVJlY2VpdmVkRXZlbnRBcmdzIGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDEwMDApOyAgICAgLy/lu7bml7YxMDBtc+etieW+heaOpeaUtuaVsOaNrgoKICAgICAgICAgICAgICAgIC8vdGhpcy5JbnZva2UgIOi3qOe6v+eoi+iuv+mXrnVp55qE5pa55rOVCiAgICAgICAgICAgICAgICB0aGlzLkludm9rZSgoRXZlbnRIYW5kbGVyKShkZWxlZ2F0ZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIEJ5dGVbXSBSZWNlaXZlZERhdGEgPSBuZXcgQnl0ZVtzcC5CeXRlc1RvUmVhZF07CiAgICAgICAgICAgICAgICAgICAgc3AuUmVhZChSZWNlaXZlZERhdGEsIDAsIFJlY2VpdmVkRGF0YS5MZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIFN0cmluZyBSZWN2RGF0YVRleHQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgUmVjZWl2ZWREYXRhLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgUmVjdkRhdGFUZXh0ICs9IChSZWNlaXZlZERhdGFbaV0uVG9TdHJpbmcoIlgyIikgKyAiICIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0YnhSZWN2RGF0YS5UZXh0ICs9IFJlY3ZEYXRhVGV4dDsKICAgICAgICAgICAgICAgICAgICBzcC5EaXNjYXJkSW5CdWZmZXIoKTsgICAgICAgLy/kuKLlvIPmjqXmlLbnvJPlhrLljLrmlbDmja4KICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAqLwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSBib29sIENoZWNrU2VuZERhdGEoKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKHRieFNlbmREYXRhLlRleHQuVHJpbSgpID09ICIiKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSBib29sIENoZWNrRGF0YShjaGFyIGZsYWcpCiAgICAgICAgewogICAgICAgICAgICBpZiAoZmxhZyA9PSAnMScpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBMaXZlRGF0YVJlY2VpdmVkKCkKICAgICAgICB7CiAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDEwMCk7ICAgICAvL+W7tuaXtjEwMG1z562J5b6F5o6l5pS25pWw5o2uCgogICAgICAgICAgICAvL3RoaXMuSW52b2tlICDot6jnur/nqIvorr/pl651aeeahOaWueazlQogICAgICAgICAgICB0aGlzLkludm9rZSgoRXZlbnRIYW5kbGVyKShkZWxlZ2F0ZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBCeXRlW10gUmVjZWl2ZWREYXRhID0gbmV3IEJ5dGVbc3AuQnl0ZXNUb1JlYWRdOwogICAgICAgICAgICAgICAgc3AuUmVhZChSZWNlaXZlZERhdGEsIDAsIFJlY2VpdmVkRGF0YS5MZW5ndGgpOwogICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgIFN0cmluZyBSZWN2RGF0YVRleHQgPSBudWxsOwogICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBSZWNlaXZlZERhdGEuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgUmVjdkRhdGFUZXh0ICs9IFJlY2VpdmVkRGF0YVtpXS5Ub1N0cmluZygiWDIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBzcC5EaXNjYXJkSW5CdWZmZXIoKTsgICAgICAgLy/kuKLlvIPmjqXmlLbnvJPlhrLljLrmlbDmja4KICAgICAgICAgICAgfSkpOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIEJ0bk9wZW5Db21fQ2xpY2sob2JqZWN0IHNlbmRlciwgRXZlbnRBcmdzIGUpCiAgICAgICAgewogICAgICAgICAgICBpZiAoaXNPcGVuID09IGZhbHNlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoIUNoZWNrUG9ydFNldHRpbmcoKSkgICAgICAgIC8v5qOA5rWL5Liy5Y+j6K6+572uCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZUJveC5TaG93KCLkuLLlj6PmnKrorr7nva7vvIEiLCAi6ZSZ6K+v5o+Q56S6Iik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFpc1NldFByb3BlcnR5KSAgICAgICAgICAgICAvL+S4suWPo+acquiuvue9ruWImeiuvue9ruS4suWPowogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFNldFBvcnRQcm9QZXJ0eSgpOwogICAgICAgICAgICAgICAgICAgIGlzU2V0UHJvcGVydHkgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3AuT3BlbigpOwogICAgICAgICAgICAgICAgICAgIGlzT3BlbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnRuT3BlbkNvbS5UZXh0ID0gIuWFs+mXreS4suWPoyI7CiAgICAgICAgICAgICAgICAgICAgLy/kuLLlj6PmiZPlvIDlkI7liJnnm7jlhbPkuLLlj6Porr7nva7mjInpkq7kvr/kuI3lj6/lho3nlKgKICAgICAgICAgICAgICAgICAgICBjYnhDT01Qb3J0LkVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBjYnhCYXVkUmF0ZS5FbmFibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgY2J4RGF0YUJpdHMuRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGNieFBhcml0di5FbmFibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgY2J4U3RvcEJpdHMuRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbikKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAvL+aJk+W8gOS4suWPo+Wksei0peWQju+8jOebuOW6lOagh+W/l+S9jeWPlua2iAogICAgICAgICAgICAgICAgICAgIGlzU2V0UHJvcGVydHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBpc09wZW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlQm94LlNob3coIuS4suWPo+aXoOaViOaIluW3suiiq+WNoOeUqO+8gSIsICLplJnor6/mj5DnpLoiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRyeSAgICAgICAvL+WFs+mXreS4suWPoyAgICAgICAKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzcC5DbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIGlzT3BlbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJ0bk9wZW5Db20uVGV4dCA9ICLmiZPlvIDkuLLlj6MiOwogICAgICAgICAgICAgICAgICAgIC8v5YWz6Zet5Liy5Y+j5ZCO77yM5Liy5Y+j6K6+572u6YCJ6aG55Y+v5Lul57un57ut5L2/55SoCiAgICAgICAgICAgICAgICAgICAgY2J4Q09NUG9ydC5FbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBjYnhCYXVkUmF0ZS5FbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBjYnhEYXRhQml0cy5FbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBjYnhQYXJpdHYuRW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgY2J4U3RvcEJpdHMuRW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VCb3guU2hvdygi5YWz6Zet5Liy5Y+j5pe25Y+R55Sf6ZSZ6K+v77yBIiwgIumUmeivr+aPkOekuiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0xpdmUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNrYkxpdmVEYXRhLkNoZWNrZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXRDcmMoKSB7CiAgICAgICAgICAgIHVjQ1JDSGkgPSAweEZGOwogICAgICAgICAgICB1Y0NSQ0xvID0gMHhGRjsKICAgICAgICB9CgogICAgICAgICNyZWdpb24KICAgICAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBCeXRlW10gYXVjQ1JDSGkgPSB7CiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLCAweDAxLCAweEMwLCAweDgwLCAweDQxLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLCAweDAwLCAweEMxLCAweDgxLCAweDQwLAogICAgICAgICAgICAgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLCAweDAwLCAweEMxLCAweDgxLCAweDQwLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLCAweDAxLCAweEMwLCAweDgwLCAweDQxLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwKICAgICAgICAgICAgIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwLCAweDAxLCAweEMwLCAweDgwLCAweDQxLCAweDAxLCAweEMwLCAweDgwLCAweDQxLAogICAgICAgICAgICAgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMCwgMHhDMSwgMHg4MSwgMHg0MCwgMHgwMSwgMHhDMCwgMHg4MCwgMHg0MSwKICAgICAgICAgICAgIDB4MDAsIDB4QzEsIDB4ODEsIDB4NDAsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsIDB4MDEsIDB4QzAsIDB4ODAsIDB4NDEsCiAgICAgICAgICAgICAweDAwLCAweEMxLCAweDgxLCAweDQwCiAgICAgICAgIH07CiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQnl0ZVtdIGF1Y0NSQ0xvID0gewogICAgICAgICAgICAgMHgwMCwgMHhDMCwgMHhDMSwgMHgwMSwgMHhDMywgMHgwMywgMHgwMiwgMHhDMiwgMHhDNiwgMHgwNiwgMHgwNywgMHhDNywKICAgICAgICAgICAgIDB4MDUsIDB4QzUsIDB4QzQsIDB4MDQsIDB4Q0MsIDB4MEMsIDB4MEQsIDB4Q0QsIDB4MEYsIDB4Q0YsIDB4Q0UsIDB4MEUsCiAgICAgICAgICAgICAweDBBLCAweENBLCAweENCLCAweDBCLCAweEM5LCAweDA5LCAweDA4LCAweEM4LCAweEQ4LCAweDE4LCAweDE5LCAweEQ5LAogICAgICAgICAgICAgMHgxQiwgMHhEQiwgMHhEQSwgMHgxQSwgMHgxRSwgMHhERSwgMHhERiwgMHgxRiwgMHhERCwgMHgxRCwgMHgxQywgMHhEQywKICAgICAgICAgICAgIDB4MTQsIDB4RDQsIDB4RDUsIDB4MTUsIDB4RDcsIDB4MTcsIDB4MTYsIDB4RDYsIDB4RDIsIDB4MTIsIDB4MTMsIDB4RDMsCiAgICAgICAgICAgICAweDExLCAweEQxLCAweEQwLCAweDEwLCAweEYwLCAweDMwLCAweDMxLCAweEYxLCAweDMzLCAweEYzLCAweEYyLCAweDMyLAogICAgICAgICAgICAgMHgzNiwgMHhGNiwgMHhGNywgMHgzNywgMHhGNSwgMHgzNSwgMHgzNCwgMHhGNCwgMHgzQywgMHhGQywgMHhGRCwgMHgzRCwKICAgICAgICAgICAgIDB4RkYsIDB4M0YsIDB4M0UsIDB4RkUsIDB4RkEsIDB4M0EsIDB4M0IsIDB4RkIsIDB4MzksIDB4RjksIDB4RjgsIDB4MzgsCiAgICAgICAgICAgICAweDI4LCAweEU4LCAweEU5LCAweDI5LCAweEVCLCAweDJCLCAweDJBLCAweEVBLCAweEVFLCAweDJFLCAweDJGLCAweEVGLAogICAgICAgICAgICAgMHgyRCwgMHhFRCwgMHhFQywgMHgyQywgMHhFNCwgMHgyNCwgMHgyNSwgMHhFNSwgMHgyNywgMHhFNywgMHhFNiwgMHgyNiwKICAgICAgICAgICAgIDB4MjIsIDB4RTIsIDB4RTMsIDB4MjMsIDB4RTEsIDB4MjEsIDB4MjAsIDB4RTAsIDB4QTAsIDB4NjAsIDB4NjEsIDB4QTEsCiAgICAgICAgICAgICAweDYzLCAweEEzLCAweEEyLCAweDYyLCAweDY2LCAweEE2LCAweEE3LCAweDY3LCAweEE1LCAweDY1LCAweDY0LCAweEE0LAogICAgICAgICAgICAgMHg2QywgMHhBQywgMHhBRCwgMHg2RCwgMHhBRiwgMHg2RiwgMHg2RSwgMHhBRSwgMHhBQSwgMHg2QSwgMHg2QiwgMHhBQiwKICAgICAgICAgICAgIDB4NjksIDB4QTksIDB4QTgsIDB4NjgsIDB4NzgsIDB4QjgsIDB4QjksIDB4NzksIDB4QkIsIDB4N0IsIDB4N0EsIDB4QkEsCiAgICAgICAgICAgICAweEJFLCAweDdFLCAweDdGLCAweEJGLCAweDdELCAweEJELCAweEJDLCAweDdDLCAweEI0LCAweDc0LCAweDc1LCAweEI1LAogICAgICAgICAgICAgMHg3NywgMHhCNywgMHhCNiwgMHg3NiwgMHg3MiwgMHhCMiwgMHhCMywgMHg3MywgMHhCMSwgMHg3MSwgMHg3MCwgMHhCMCwKICAgICAgICAgICAgIDB4NTAsIDB4OTAsIDB4OTEsIDB4NTEsIDB4OTMsIDB4NTMsIDB4NTIsIDB4OTIsIDB4OTYsIDB4NTYsIDB4NTcsIDB4OTcsCiAgICAgICAgICAgICAweDU1LCAweDk1LCAweDk0LCAweDU0LCAweDlDLCAweDVDLCAweDVELCAweDlELCAweDVGLCAweDlGLCAweDlFLCAweDVFLAogICAgICAgICAgICAgMHg1QSwgMHg5QSwgMHg5QiwgMHg1QiwgMHg5OSwgMHg1OSwgMHg1OCwgMHg5OCwgMHg4OCwgMHg0OCwgMHg0OSwgMHg4OSwKICAgICAgICAgICAgIDB4NEIsIDB4OEIsIDB4OEEsIDB4NEEsIDB4NEUsIDB4OEUsIDB4OEYsIDB4NEYsIDB4OEQsIDB4NEQsIDB4NEMsIDB4OEMsCiAgICAgICAgICAgICAweDQ0LCAweDg0LCAweDg1LCAweDQ1LCAweDg3LCAweDQ3LCAweDQ2LCAweDg2LCAweDgyLCAweDQyLCAweDQzLCAweDgzLAogICAgICAgICAgICAgMHg0MSwgMHg4MSwgMHg4MCwgMHg0MAogICAgICAgICB9OwogICAgICAgICNlbmRyZWdpb24KCiAgICAgICAgcHJpdmF0ZSB2b2lkIENyY0NhbGMoQnl0ZSBjbWRfQWRkciwgQnl0ZSBjbWRfQ29kZSwgQnl0ZVtdIGNtZF9CdEUpCiAgICAgICAgewogICAgICAgICAgICBpbnQgdXNMZW4gPSA2LCBpID0gMDsKICAgICAgICAgICAgVUludDE2IGlJbmRleCA9IDB4MDAwMDsKICAgICAgICAgICAgQnl0ZVtdIHB1Y0ZyYW1lID0geyBjbWRfQWRkciwgY21kX0NvZGUsIGNtZF9CdEVbMF0sIGNtZF9CdEVbMV0sIGNtZF9CdEVbMl0sIGNtZF9CdEVbM10gfTsKCiAgICAgICAgICAgIEluaXRDcmMoKTsKICAgICAgICAgICAgd2hpbGUgKHVzTGVuLS0gPiAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpSW5kZXggPSAoVUludDE2KSh1Y0NSQ0xvIF4gcHVjRnJhbWVbaSsrXSk7CiAgICAgICAgICAgICAgICB1Y0NSQ0xvID0gKEJ5dGUpKHVjQ1JDSGkgXiBhdWNDUkNIaVtpSW5kZXhdKTsKICAgICAgICAgICAgICAgIHVjQ1JDSGkgPSBhdWNDUkNMb1tpSW5kZXhdOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgTGl2ZURhdGFQcm9jKGludCBmbkNvZGUpCiAgICAgICAgewogICAgICAgICAgICBpZiAoZm5Db2RlID09IDIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDEwMCk7ICAgICAvL+W7tuaXtjEwMG1z562J5b6F5o6l5pS25pWw5o2uCgogICAgICAgICAgICAgICAgLy90aGlzLkludm9rZSAg6Leo57q/56iL6K6/6ZeudWnnmoTmlrnms5UKICAgICAgICAgICAgICAgIHRoaXMuSW52b2tlKChFdmVudEhhbmRsZXIpKGRlbGVnYXRlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgQnl0ZVtdIFJlY2VpdmVkRGF0YSA9IG5ldyBCeXRlW3NwLkJ5dGVzVG9SZWFkXTsKICAgICAgICAgICAgICAgICAgICBzcC5SZWFkKFJlY2VpdmVkRGF0YSwgMCwgUmVjZWl2ZWREYXRhLkxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgc3AuRGlzY2FyZEluQnVmZmVyKCk7ICAgICAgIC8v5Lii5byD5o6l5pS257yT5Yay5Yy65pWw5o2uCgogICAgICAgICAgICAgICAgICAgIFN0cmluZyB0ZW1wU3RyID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdGVtcFN0YXRDb2RlID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMzsgaSA8IFJlY2VpdmVkRGF0YS5MZW5ndGggLSAyOyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciArPSAgKENvbnZlcnQuVG9TdHJpbmcoUmVjZWl2ZWREYXRhW2ldLCAyKS5QYWRMZWZ0KDgsICcwJykpOwogICAgICAgICAgICAgICAgICAgICAgICBjaGFyW10gdGVtcEFyciA9IHRlbXBTdHIuVG9DaGFyQXJyYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuUmV2ZXJzZSh0ZW1wQXJyKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YXRDb2RlID0gU3RyaW5nLkNvbmNhdCh0ZW1wU3RhdENvZGUsIG5ldyBTdHJpbmcodGVtcEFycikpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjaGFyW10gU3RhdENvZGUgPSB0ZW1wU3RhdENvZGUuVG9DaGFyQXJyYXkoKTsKICAgICAgICAgICAgICAgICAgICAvKgogICAgICAgICAgICAgICAgICAgIEFycmF5LlJldmVyc2UoU3RhdENvZGUpOwogICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgU3RhdENvZGUuTGVuZ3RoIC0gMzsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGJ4UmVjdkRhdGEuVGV4dCArPSBTdGF0Q29kZVtpXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICBDaGVja18wMjAwLlRleHQgPSBTdGF0Q29kZVswXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMDEuVGV4dCA9IFN0YXRDb2RlWzFdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDIwMi5UZXh0ID0gU3RhdENvZGVbMl0uVG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMjAzLlRleHQgPSBTdGF0Q29kZVszXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMDQuVGV4dCA9IFN0YXRDb2RlWzRdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDIwNS5UZXh0ID0gU3RhdENvZGVbNV0uVG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMjA2LlRleHQgPSBTdGF0Q29kZVs2XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMDcuVGV4dCA9IFN0YXRDb2RlWzddLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDIwOC5UZXh0ID0gU3RhdENvZGVbOF0uVG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMjA5LlRleHQgPSBTdGF0Q29kZVs5XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTAuVGV4dCA9IFN0YXRDb2RlWzEwXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTEuVGV4dCA9IFN0YXRDb2RlWzExXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTIuVGV4dCA9IFN0YXRDb2RlWzEyXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTMuVGV4dCA9IFN0YXRDb2RlWzEzXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTQuVGV4dCA9IFN0YXRDb2RlWzE0XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTUuVGV4dCA9IFN0YXRDb2RlWzE1XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTYuVGV4dCA9IFN0YXRDb2RlWzE2XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTcuVGV4dCA9IFN0YXRDb2RlWzE3XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTguVGV4dCA9IFN0YXRDb2RlWzE4XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMTkuVGV4dCA9IFN0YXRDb2RlWzE5XS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAyMjAuVGV4dCA9IFN0YXRDb2RlWzIwXS5Ub1N0cmluZygpOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZm5Db2RlID09IDMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDE1MCk7ICAgICAvL+W7tuaXtjE1MG1z562J5b6F5o6l5pS25pWw5o2uCgogICAgICAgICAgICAgICAgLy90aGlzLkludm9rZSAg6Leo57q/56iL6K6/6ZeudWnnmoTmlrnms5UKICAgICAgICAgICAgICAgIHRoaXMuSW52b2tlKChFdmVudEhhbmRsZXIpKGRlbGVnYXRlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgQnl0ZVtdIFJlY2VpdmVkRGF0YSA9IG5ldyBCeXRlW3NwLkJ5dGVzVG9SZWFkXTsKICAgICAgICAgICAgICAgICAgICBzcC5SZWFkKFJlY2VpdmVkRGF0YSwgMCwgUmVjZWl2ZWREYXRhLkxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgc3AuRGlzY2FyZEluQnVmZmVyKCk7ICAgICAgIC8v5Lii5byD5o6l5pS257yT5Yay5Yy65pWw5o2uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2hvcnRbXSB0ZW1wTGl2ZURhdGFfMDMgPSBuZXcgc2hvcnRbKFJlY2VpdmVkRGF0YS5MZW5ndGggLSA1KSAvIDJdOwogICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwLCBqID0gMzsgaiA8IFJlY2VpdmVkRGF0YS5MZW5ndGggLSAyOyBpKyssIGorPTIpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDNbaV0gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDNbaV0gPSAoc2hvcnQpKHRlbXBMaXZlRGF0YV8wM1tpXSBeIFJlY2VpdmVkRGF0YVtqXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBMaXZlRGF0YV8wM1tpXSA9IChzaG9ydCkodGVtcExpdmVEYXRhXzAzW2ldIDw8IDgpOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDNbaV0gPSAoc2hvcnQpKHRlbXBMaXZlRGF0YV8wM1tpXSBeIFJlY2VpdmVkRGF0YVtqICsgMV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkb3VibGVbXSBMaXZlRGF0YV8wMyA9IG5ldyBkb3VibGVbdGVtcExpdmVEYXRhXzAzLkxlbmd0aF07CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCAzOyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBMaXZlRGF0YV8wM1tpXSA9IChkb3VibGUpdGVtcExpdmVEYXRhXzAzW2ldIC8gMTAuMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDM7IGkgPCA1OyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBMaXZlRGF0YV8wM1tpXSA9IChkb3VibGUpdGVtcExpdmVEYXRhXzAzW2ldOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gNTsgaSA8IDEzOyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBMaXZlRGF0YV8wM1tpXSA9IChkb3VibGUpdGVtcExpdmVEYXRhXzAzW2ldIC8gMTAuMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDEzOyBpIDwgdGVtcExpdmVEYXRhXzAzLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgTGl2ZURhdGFfMDNbaV0gPSAoZG91YmxlKXRlbXBMaXZlRGF0YV8wM1tpXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IExpdmVEYXRhXzAzLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGJ4UmVjdkRhdGEuVGV4dCArPSAoTGl2ZURhdGFfMDNbaV0gKyAiICIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IExpdmVEYXRhXzAzLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGJ4UmVjdkRhdGEuVGV4dCArPSAodGVtcExpdmVEYXRhXzAzW2ldICsgIiAiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBSZWNlaXZlZERhdGEuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0YnhSZWN2RGF0YS5UZXh0ICs9IChSZWNlaXZlZERhdGFbaV0uVG9TdHJpbmcoIlgyIikgKyAiICIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMDAuVGV4dCA9IExpdmVEYXRhXzAzWzBdICsgIiUiOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMDEuVGV4dCA9IExpdmVEYXRhXzAzWzFdICsgIuKEgyI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMwMi5UZXh0ID0gTGl2ZURhdGFfMDNbMl0gKyAi4oSDIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMzAzLlRleHQgPSBMaXZlRGF0YV8wM1szXSArICJtbSI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMwNC5UZXh0ID0gTGl2ZURhdGFfMDNbNF0gKyAibW0iOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMDUuVGV4dCA9IExpdmVEYXRhXzAzWzVdICsgIiUiOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMDYuVGV4dCA9IExpdmVEYXRhXzAzWzZdICsgIiUiOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMDcuVGV4dCA9IExpdmVEYXRhXzAzWzddICsgIuKEgyI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMwOC5UZXh0ID0gTGl2ZURhdGFfMDNbOF0gKyAi4oSDIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMzA5LlRleHQgPSBMaXZlRGF0YV8wM1s5XSArICIlIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMzEwLlRleHQgPSBMaXZlRGF0YV8wM1sxMF0gKyAiJSI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxMS5UZXh0ID0gTGl2ZURhdGFfMDNbMTFdICsgIiUiOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMTIuVGV4dCA9IExpdmVEYXRhXzAzWzEyXSArICIlIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wMzEzLlRleHQgPSBMaXZlRGF0YV8wM1sxM10gKyAibW0iOwogICAgICAgICAgICAgICAgICAgIENoZWNrXzAzMTQuVGV4dCA9IExpdmVEYXRhXzAzWzE0XSArICJtbSI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxNS5UZXh0ID0gTGl2ZURhdGFfMDNbMTVdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxNi5UZXh0ID0gTGl2ZURhdGFfMDNbMTZdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxNy5UZXh0ID0gTGl2ZURhdGFfMDNbMTddLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxOC5UZXh0ID0gTGl2ZURhdGFfMDNbMThdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMxOS5UZXh0ID0gTGl2ZURhdGFfMDNbMTldLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyMC5UZXh0ID0gTGl2ZURhdGFfMDNbMjBdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyMS5UZXh0ID0gTGl2ZURhdGFfMDNbMjFdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyMi5UZXh0ID0gTGl2ZURhdGFfMDNbMjJdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyMy5UZXh0ID0gTGl2ZURhdGFfMDNbMjNdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyNC5UZXh0ID0gTGl2ZURhdGFfMDNbMjRdLlRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDMyNS5UZXh0ID0gTGl2ZURhdGFfMDNbMjVdLlRvU3RyaW5nKCk7CgogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZm5Db2RlID09IDQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDE1MCk7ICAgICAvL+W7tuaXtjE1MG1z562J5b6F5o6l5pS25pWw5o2uCgogICAgICAgICAgICAgICAgLy90aGlzLkludm9rZSAg6Leo57q/56iL6K6/6ZeudWnnmoTmlrnms5UKICAgICAgICAgICAgICAgIHRoaXMuSW52b2tlKChFdmVudEhhbmRsZXIpKGRlbGVnYXRlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgQnl0ZVtdIFJlY2VpdmVkRGF0YSA9IG5ldyBCeXRlW3NwLkJ5dGVzVG9SZWFkXTsKICAgICAgICAgICAgICAgICAgICBzcC5SZWFkKFJlY2VpdmVkRGF0YSwgMCwgUmVjZWl2ZWREYXRhLkxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgc3AuRGlzY2FyZEluQnVmZmVyKCk7ICAgICAgIC8v5Lii5byD5o6l5pS257yT5Yay5Yy65pWw5o2uCgogICAgICAgICAgICAgICAgICAgIHNob3J0W10gdGVtcExpdmVEYXRhXzA0ID0gbmV3IHNob3J0WyhSZWNlaXZlZERhdGEuTGVuZ3RoIC0gNSkgLyAyXTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMCwgaiA9IDM7IGogPCBSZWNlaXZlZERhdGEuTGVuZ3RoIC0gMjsgaSsrLCBqICs9IDIpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDRbaV0gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDRbaV0gPSAoc2hvcnQpKHRlbXBMaXZlRGF0YV8wNFtpXSBeIFJlY2VpdmVkRGF0YVtqXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBMaXZlRGF0YV8wNFtpXSA9IChzaG9ydCkodGVtcExpdmVEYXRhXzA0W2ldIDw8IDgpOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTGl2ZURhdGFfMDRbaV0gPSAoc2hvcnQpKHRlbXBMaXZlRGF0YV8wNFtpXSBeIFJlY2VpdmVkRGF0YVtqICsgMV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkb3VibGVbXSBMaXZlRGF0YV8wNCA9IG5ldyBkb3VibGVbdGVtcExpdmVEYXRhXzA0Lkxlbmd0aF07CiAgICAgICAgICAgICAgICAgICAgTGl2ZURhdGFfMDRbMF0gPSAoZG91YmxlKXRlbXBMaXZlRGF0YV8wNFswXTsKICAgICAgICAgICAgICAgICAgICBMaXZlRGF0YV8wNFt0ZW1wTGl2ZURhdGFfMDQuTGVuZ3RoIC0gMV0gPSAoZG91YmxlKXRlbXBMaXZlRGF0YV8wNFt0ZW1wTGl2ZURhdGFfMDQuTGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPCB0ZW1wTGl2ZURhdGFfMDQuTGVuZ3RoIC0gMTsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgTGl2ZURhdGFfMDRbaV0gPSAoZG91YmxlKXRlbXBMaXZlRGF0YV8wNFtpXSAvIDEwLjA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IExpdmVEYXRhXzA0Lkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGJ4UmVjdkRhdGEuVGV4dCArPSAoTGl2ZURhdGFfMDRbaV0gKyAiICIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IExpdmVEYXRhXzAzLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGJ4UmVjdkRhdGEuVGV4dCArPSAodGVtcExpdmVEYXRhXzAzW2ldICsgIiAiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBSZWNlaXZlZERhdGEuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0YnhSZWN2RGF0YS5UZXh0ICs9IChSZWNlaXZlZERhdGFbaV0uVG9TdHJpbmcoIlgyIikgKyAiICIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgICAgIGlmIChMaXZlRGF0YV8wNFswXSA8IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBDaGVja18wNDAwLlRleHQgPSAi5peg5L+h5Y+3IjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDQwMC5UZXh0ID0gTGl2ZURhdGFfMDRbMF0uVG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDQwMS5UZXh0ID0gTGl2ZURhdGFfMDRbMV0gKyAiJSI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDQwMi5UZXh0ID0gTGl2ZURhdGFfMDRbMl0gKyAiJSI7CiAgICAgICAgICAgICAgICAgICAgQ2hlY2tfMDQwMy5UZXh0ID0gTGl2ZURhdGFfMDRbM10gKyAi4oSDIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wNDA0LlRleHQgPSBMaXZlRGF0YV8wNFs0XSArICIlIjsKICAgICAgICAgICAgICAgICAgICBDaGVja18wNDA1LlRleHQgPSBMaXZlRGF0YV8wNFs1XSArICJtbSI7CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBMaXZlU2VuZENtZF8wMiAoKQogICAgICAgIHsKICAgICAgICAgICAgZGV2QWRkciA9IENvbnZlcnQuVG9CeXRlKGNieERldkFkZC5UZXh0LlRyaW0oKSk7CiAgICAgICAgICAgIGZ1bkNvZGUgPSBNQl9SRUFEX0RJU0NSRVRFOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDQ7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYWRkckJ0RVtpXSA9IE1CX1JFQURfRElTQ1JFVEVfQUREQlRFW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENyY0NhbGMoZGV2QWRkciwgZnVuQ29kZSwgYWRkckJ0RSk7CiAgICAgICAgICAgIEJ5dGVbXSBzZW5kQ21kXzB4MDIgPSB7IGRldkFkZHIsIGZ1bkNvZGUsIGFkZHJCdEVbMF0sIGFkZHJCdEVbMV0sIGFkZHJCdEVbMl0sIGFkZHJCdEVbM10sIHVjQ1JDTG8sIHVjQ1JDSGkgfTsKICAgICAgICAgICAgc3AuV3JpdGUoc2VuZENtZF8weDAyLlRvQXJyYXkoKSwgMCwgOCk7CiAgICAgICAgICAgIC8vTGl2ZURhdGFSZWNlaXZlZCgpOwogICAgICAgICAgICBMaXZlRGF0YVByb2MoMik7CiAgICAgICAgICAgIC8qCiAgICAgICAgICAgIGZ1bkNvZGUgPSBNQl9SRUFEX0hPTERfUkVHOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDQ7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYWRkckJ0RVtpXSA9IE1CX1JFQURfSE9MRF9SRUdfQUREQlRFW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENyY0NhbGMoZGV2QWRkciwgZnVuQ29kZSwgYWRkckJ0RSk7CiAgICAgICAgICAgIEJ5dGVbXSBzZW5kQ21kXzB4MDMgPSB7IGRldkFkZHIsIGZ1bkNvZGUsIGFkZHJCdEVbMF0sIGFkZHJCdEVbMV0sIGFkZHJCdEVbMl0sIGFkZHJCdEVbM10sIHVjQ1JDTG8sIHVjQ1JDSGkgfTsKICAgICAgICAgICAgLy9zcC5Xcml0ZShzZW5kQ21kXzB4MDMuVG9BcnJheSgpLCAwLCA4KTsKICAgICAgICAgICAgLy8gTGl2ZURhdGFSZWNlaXZlZCgpOwoKICAgICAgICAgICAgZnVuQ29kZSA9IE1CX1JFQURfSU5QVVRfUkVHOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDQ7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYWRkckJ0RVtpXSA9IE1CX1JFQURfSU5QVVRfUkVHX0FEREJURVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBDcmNDYWxjKGRldkFkZHIsIGZ1bkNvZGUsIGFkZHJCdEUpOwogICAgICAgICAgICBCeXRlW10gc2VuZENtZF8weDA0ID0geyBkZXZBZGRyLCBmdW5Db2RlLCBhZGRyQnRFWzBdLCBhZGRyQnRFWzFdLCBhZGRyQnRFWzJdLCBhZGRyQnRFWzNdLCB1Y0NSQ0xvLCB1Y0NSQ0hpIH07CiAgICAgICAgICAgIC8vc3AuV3JpdGUoc2VuZENtZF8weDA0LlRvQXJyYXkoKSwgMCwgOCk7CiAgICAgICAgICAgIC8vTGl2ZURhdGFSZWNlaXZlZCgpOwogICAgICAgICAgICAqLwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIExpdmVTZW5kQ21kXzAzKCkKICAgICAgICB7CiAgICAgICAgICAgIGRldkFkZHIgPSBDb252ZXJ0LlRvQnl0ZShjYnhEZXZBZGQuVGV4dC5UcmltKCkpOwogICAgICAgICAgICBmdW5Db2RlID0gTUJfUkVBRF9IT0xEX1JFRzsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCA0OyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGFkZHJCdEVbaV0gPSBNQl9SRUFEX0hPTERfUkVHX0FEREJURVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBDcmNDYWxjKGRldkFkZHIsIGZ1bkNvZGUsIGFkZHJCdEUpOwogICAgICAgICAgICBCeXRlW10gc2VuZENtZF8weDAzID0geyBkZXZBZGRyLCBmdW5Db2RlLCBhZGRyQnRFWzBdLCBhZGRyQnRFWzFdLCBhZGRyQnRFWzJdLCBhZGRyQnRFWzNdLCB1Y0NSQ0xvLCB1Y0NSQ0hpIH07CiAgICAgICAgICAgIHNwLldyaXRlKHNlbmRDbWRfMHgwMy5Ub0FycmF5KCksIDAsIDgpOwogICAgICAgICAgICAvLyBMaXZlRGF0YVJlY2VpdmVkKCk7CiAgICAgICAgICAgIExpdmVEYXRhUHJvYygzKTsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBMaXZlU2VuZENtZF8wNCgpCiAgICAgICAgewogICAgICAgICAgICBkZXZBZGRyID0gQ29udmVydC5Ub0J5dGUoY2J4RGV2QWRkLlRleHQuVHJpbSgpKTsKICAgICAgICAgICAgZnVuQ29kZSA9IE1CX1JFQURfSU5QVVRfUkVHOwogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDQ7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYWRkckJ0RVtpXSA9IE1CX1JFQURfSU5QVVRfUkVHX0FEREJURVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBDcmNDYWxjKGRldkFkZHIsIGZ1bkNvZGUsIGFkZHJCdEUpOwogICAgICAgICAgICBCeXRlW10gc2VuZENtZF8weDA0ID0geyBkZXZBZGRyLCBmdW5Db2RlLCBhZGRyQnRFWzBdLCBhZGRyQnRFWzFdLCBhZGRyQnRFWzJdLCBhZGRyQnRFWzNdLCB1Y0NSQ0xvLCB1Y0NSQ0hpIH07CiAgICAgICAgICAgIC8vdGJ4UmVjdkRhdGEuVGV4dCArPSBzZW5kQ21kXzB4MDQuVG9TdHJpbmcoKTsKICAgICAgICAgICAgc3AuV3JpdGUoc2VuZENtZF8weDA0LlRvQXJyYXkoKSwgMCwgOCk7CiAgICAgICAgICAgIC8vTGl2ZURhdGFSZWNlaXZlZCgpOwogICAgICAgICAgICBMaXZlRGF0YVByb2MoNCk7CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgQ2tiTGl2ZURhdGFfQ2hlY2tlZENoYW5nZWQob2JqZWN0IHNlbmRlciwgRXZlbnRBcmdzIGUpCiAgICAgICAgewogICAgICAgICAgICBpZiAoY2tiTGl2ZURhdGEuQ2hlY2tlZCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaXNMaXZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJ0blNlbmQuRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaXNMaXZlID0gZmFsc2U7CiAgICAgICAgICAgICAgICBidG5TZW5kLkVuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0xpdmUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChpc09wZW4pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdGltZXIxLkVuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VCb3guU2hvdygi5Liy5Y+j5pyq5omT5byAIiwgIumUmeivr+aPkOekuiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGltZXIxLkVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSBCeXRlW10gSGV4U3RyVG9ieXRlKHN0cmluZyBoZXhTdHJpbmcpCiAgICAgICAgewogICAgICAgICAgICBoZXhTdHJpbmcgPSBoZXhTdHJpbmcuUmVwbGFjZSgiICIsICIiKTsKICAgICAgICAgICAgaWYgKChoZXhTdHJpbmcuTGVuZ3RoICUgMikgIT0gMCkKICAgICAgICAgICAgICAgIGhleFN0cmluZyArPSAiICI7CiAgICAgICAgICAgIEJ5dGVbXSByZXR1cm5CeXRlcyA9IG5ldyBieXRlW2hleFN0cmluZy5MZW5ndGggLyAyXTsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCByZXR1cm5CeXRlcy5MZW5ndGg7IGkrKykKICAgICAgICAgICAgICAgIHJldHVybkJ5dGVzW2ldID0gQ29udmVydC5Ub0J5dGUoaGV4U3RyaW5nLlN1YnN0cmluZyhpICogMiwgMikuVHJpbSgpLCAxNik7CiAgICAgICAgICAgIHJldHVybiByZXR1cm5CeXRlczsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBCdG5TZW5kX0NsaWNrKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGlzT3BlbikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgQnl0ZVtdIHNlbmREYXRhID0gSGV4U3RyVG9ieXRlKHRieFNlbmREYXRhLlRleHQuVHJpbSgpKTsKICAgICAgICAgICAgICAgICAgICBzcC5Xcml0ZShzZW5kRGF0YS5Ub0FycmF5KCksIDAsIHNlbmREYXRhLkxlbmd0aCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VCb3guU2hvdygi5Y+R6YCB5pWw5o2u5pe25Y+R55Sf6ZSZ6K+v77yBIiwgIumUmeivr+aPkOekuiIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIE1lc3NhZ2VCb3guU2hvdygi5Liy5Y+j5pyq5omT5byAIiwgIumUmeivr+aPkOekuiIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghQ2hlY2tTZW5kRGF0YSgpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBNZXNzYWdlQm94LlNob3coIuivt+i+k+WFpeimgeWPkemAgeeahOaVsOaNriEiLCAi6ZSZ6K+v5o+Q56S6Iik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDEwMDApOyAgICAgLy/lu7bml7YxMDAwbXPnrYnlvoXmjqXmlLbmlbDmja4KCiAgICAgICAgICAgIC8vdGhpcy5JbnZva2UgIOi3qOe6v+eoi+iuv+mXrnVp55qE5pa55rOVCiAgICAgICAgICAgIHRoaXMuSW52b2tlKChFdmVudEhhbmRsZXIpKGRlbGVnYXRlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIEJ5dGVbXSBSZWNlaXZlZERhdGEgPSBuZXcgQnl0ZVtzcC5CeXRlc1RvUmVhZF07CiAgICAgICAgICAgICAgICBzcC5SZWFkKFJlY2VpdmVkRGF0YSwgMCwgUmVjZWl2ZWREYXRhLkxlbmd0aCk7CiAgICAgICAgICAgICAgICBTdHJpbmcgUmVjdkRhdGFUZXh0ID0gbnVsbDsKICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgUmVjZWl2ZWREYXRhLkxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFJlY3ZEYXRhVGV4dCArPSAoUmVjZWl2ZWREYXRhW2ldLlRvU3RyaW5nKCJYMiIpICsgIiAiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRieFJlY3ZEYXRhLlRleHQgPSAiIjsKICAgICAgICAgICAgICAgIHRieFJlY3ZEYXRhLlRleHQgKz0gUmVjdkRhdGFUZXh0OwogICAgICAgICAgICAgICAgc3AuRGlzY2FyZEluQnVmZmVyKCk7ICAgICAgIC8v5Lii5byD5o6l5pS257yT5Yay5Yy65pWw5o2uCiAgICAgICAgICAgIH0pKTsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBCdXR0b24xX0NsaWNrKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQogICAgICAgIHsKICAgICAgICAgICAgTGl2ZVNlbmRDbWRfMDQoKTsKICAgICAgICB9CgogICAgICAgIHByaXZhdGUgdm9pZCBUaW1lcjFfVGljayhvYmplY3Qgc2VuZGVyLCBFdmVudEFyZ3MgZSkKICAgICAgICB7CiAgICAgICAgICAgIExpdmVTZW5kQ21kXzAyKCk7CiAgICAgICAgICAgIExpdmVTZW5kQ21kXzAzKCk7CiAgICAgICAgICAgIExpdmVTZW5kQ21kXzA0KCk7CiAgICAgICAgfQoKICAgIH0=
}
